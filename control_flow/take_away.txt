Why sequences are iterable:
---------------------------

  Whenever the interpreter needs to iterate over an object x, it automatically
  calls iter(x).

  The iter built-in function:
  1. Checks whether the object implements __iter__, and calls that to obtain
     an iterator.
  2. If __iter__ is not implemented, but __getitem__ is implemented, Python
     creates an iterator that attemps to fetch items in order, starting from
     index 0.
  3. If that fails, Python raises TypeError, usually saying "C object is not
     iterable", where C is the class of the targer object.

  Therefore, Python sequences are iterable since they all implemente __getitem__.


Whether an object x is iterable:
--------------------------------

    As of Python 3.4, the most accurate way is to call iter(x) and handle a
    TypeError exception if it isn't. This is more accurate than using
    isinstance(x, abc.Iterable), because iter(x) also considers the legacy
    __getitem__ method, while the Iteable ABC does not.


Iterator definition:
--------------------
    Any object that implements the __next__ no argument method that returns the
    next item in a series or raises StopIteration when there are no more items.
    Python iterators also implement the __iter__ method so they are iterable as well.


Whether an object x is an iterator:
-----------------------------------
    The best way to check if an object x is an iterator is to call
    isinstance(x, abc.Iterator). Due to Iterator.__subclasshook__, this test
    works even if the class of x is not a real or virtual subclass of Iterator.

    Simply, if the object has methods  __next__ and __iter__, it is an iterator.


Relationship between iterables and iterators:
---------------------------------------------
    Iterable: Any object from which the iter built-in function can obtain an
    iterator.
              
    Python obtains iterators from iterables.

    An iterable should never act as an iterator over itself. That is, iterables
    must implement __iter__, but not __next__. On the other hand, for convenience,
    iterators should be iterable. An iterator's __iter__ should just return self.

    
